blueprint:
  name: üéµ Music Follow (Sonos) ‚Äì Presence-based Grouping of speakers
  description: |
    <details>
      <summary><b>What does this blueprint do?</b></summary>
      <p>
        <strong>Music Follow</strong> automatically groups your Sonos speakers to follow you as you move through your home.<br>
        When you enter a room, the music seamlessly joins you there. When you leave, it unjoins.<br>
      </p>
    </details>
    <details>
      <summary><b>How to use</b></summary>
      <ul>
        <li>Select all Sonos media players you want to include.</li>
        <li>Choose your presence sensors (one per room).</li>
        <li>Set your master player helper (an <code>input_text</code> entity).</li>
        <li>Optionally, enable a toggle helper (an <code>input_boolean</code> to turn the automation on/off).</li>
        <li>Set custom delay durations for presence triggers.</li>
        <li>Optionally, specify a volume and delay for lowering the volume after a room is vacated.</li>
      </ul>
    </details>
    ---
    <i>Tip: Only Sonos players will show up for selection. You can use any type of binary presence sensor.</i>

  domain: automation
  input:
    sonos_players:
      name: Sonos Media Players
      description: >
        Select all Sonos media players you want to include in the music-follow group.
      selector:
        entity:
          multiple: true
          filter:
            - integration: sonos
              domain: media_player

    presence_sensors:
      name: Presence Sensors
      description: >
        Select presence sensors for each room.<br>
        ‚ö†Ô∏è <b>Important: You MUST match the order of the sensors based on the order of the media players above. Otherwise the mapping will fail. </b>
      selector:
        entity:
          multiple: true
          domain: binary_sensor

    master_player_helper:
      name: Master Player Helper
      description: >
        Select an <code>input_text</code> helper to store the current master player.
      selector:
        entity:
          domain: input_text

    use_toggle_helper:
      name: Enable Toggle Helper?
      description: >
        Would you like to use an <code>input_boolean</code> to enable/disable the automation?
      default: false
      selector:
        boolean:

    toggle_helper:
      name: Toggle Helper (Optional)
      description: >
        Select your <code>input_boolean</code> toggle helper. Only needed if enabled above.
      default: ""
      selector:
        entity:
          domain: input_boolean
          multiple: false

    presence_off_delay:
      name: Presence OFF Delay (seconds)
      description: >
        How long should a room be empty before unjoining the corresponding player? (default: 60 seconds)
      default: 60
      selector:
        number:
          min: 0
          max: 600
          step: 1
          unit_of_measurement: seconds
          mode: slider

    lower_volume_enabled:
      name: Lower Volume When Room Empty?
      description: >
        Enable to automatically set the volume of a player after a room has been empty for a set time.
      default: false
      selector:
        boolean:

    lower_volume_level:
      name: Volume Level After Room Empty
      description: >
        What volume level (0.0 - 1.0) should the player be set to after the room is empty? (default: 0.2)
      default: 0.2
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
          mode: slider

    lower_volume_delay:
      name: Delay Before Lowering Volume (seconds)
      description: >
        How long after the room is empty should the volume be lowered? (default: 300 seconds = 5 minutes)
      default: 300
      selector:
        number:
          min: 10
          max: 3600
          step: 1
          unit_of_measurement: seconds
          mode: slider

mode: parallel
max_exceeded: silent

variables:
  sonos_players: !input sonos_players
  presence_sensors: !input presence_sensors
  master_player_helper: !input master_player_helper
  use_toggle: !input use_toggle_helper
  toggle_entity: !input toggle_helper
  mapping: |
    {% set sensors = presence_sensors %}
    {% set players = sonos_players %}
    {{ dict(zip(sensors, players)) }}
  lower_volume_enabled: !input lower_volume_enabled
  lower_volume_level: !input lower_volume_level

trigger:
  # Trigger when any Sonos player starts playing
  - platform: state
    entity_id: !input sonos_players
    to: 'playing'
    id: media_player_playing

  # Trigger when any presence sensor turns on
  - platform: state
    entity_id: !input presence_sensors
    to: 'on'
    id: sensor_on

  # Trigger when any presence sensor turns off
  - platform: state
    entity_id: !input presence_sensors
    to: 'off'
    id: sensor_off

  # Trigger when any presence sensor turns off (delayed)
  - platform: state
    entity_id: !input presence_sensors
    to: 'off'
    id: sensor_off_delayed
    for:
      seconds: !input presence_off_delay

  # Trigger for lowering volume after room empty
  - platform: state
    entity_id: !input presence_sensors
    to: 'off'
    id: lower_volume
    for:
      seconds: !input lower_volume_delay

condition:
  - condition: template
    value_template: >
      {{ not use_toggle or is_state(toggle_entity, 'on') }}


action:
  - choose:
      # When music starts playing, set master player if only one is playing
      - conditions:
          - condition: trigger
            id: media_player_playing
          - condition: template
            value_template: >
              {{ expand(sonos_players) | selectattr('state', 'eq', 'playing') | list | length == 1 }}
        sequence:
          - service: input_text.set_value
            target:
              entity_id: "{{ master_player_helper }}"
            data:
              value: "{{ trigger.entity_id }}"

      # When presence of a room switches to off, check if only one room is occupied and update master player accordingly
      - conditions:
          - condition: trigger
            id: sensor_off
          - condition: template
            value_template: >
              {% set mapping_dict = mapping %}
              {% set current_master = states(master_player_helper) %}
              {% set occupied = presence_sensors
                   | select('is_state', 'on')
                   | list %}
              {{ occupied | length == 1 and mapping_dict[occupied[0]] != current_master }}
        sequence:
          - service: input_text.set_value
            target:
              entity_id: "{{ master_player_helper }}"
            data:
              value: >
                {% set mapping_dict = mapping %}
                {% set occupied = presence_sensors
                     | select('is_state', 'on')
                     | list %}
                {{ mapping_dict[occupied[0]] }}

      # When presence sensor turns on and master player is playing, join the player of the now occupied room
      - conditions:
          - condition: trigger
            id: sensor_on
          - condition: template
            value_template: >
              {{ states(states(master_player_helper)) == 'playing' }}
        sequence:
          - service: media_player.join
            data:
              entity_id: "{{ states(master_player_helper) }}"
              group_members: >
                {% set mapping_dict = mapping %}
                {{ mapping_dict[trigger.entity_id] }}

      # When presence sensor turns off, unjoin that player
      - conditions:
          - condition: trigger
            id: sensor_off_delayed
        sequence:
          - service: media_player.unjoin
            target:
              entity_id: >
                {% set mapping_dict = mapping %}
                {{ mapping_dict[trigger.entity_id] }}

      # Lower volume after room empty for specified time
      - conditions:
          - condition: trigger
            id: lower_volume
          - condition: template
            value_template: "{{ lower_volume_enabled }}"
        sequence:
          - service: media_player.volume_set
            target:
              entity_id: >
                {% set mapping_dict = mapping %}
                {{ mapping_dict[trigger.entity_id] }}
            data:
              volume_level: "{{ lower_volume_level }}"
    default: []