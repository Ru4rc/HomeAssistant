blueprint:
  name: üéµ Music Follow (Sonos) ‚Äì Presence-based Grouping of speakers
  description: |
    <details>
      <summary><b>What does this blueprint do?</b></summary>
      <p>
        <strong>Music Follow</strong> automatically groups your Sonos speakers to follow you as you move through your home.<br>
        When you enter a room, the music seamlessly joins you there. When you leave, it unjoins.<br>
      </p>
    </details>
    <details>
      <summary><b>How to use</b></summary>
      <ul>
        <li>Select all Sonos media players you want to include.</li>
        <li>Choose your presence sensors (one per room).</li>
        <li>Set your master player helper (an <code>input_text</code> entity).</li>
        <li>Optionally, enable a toggle helper (an <code>input_boolean</code> to turn the automation on/off).</li>
        <li>Set custom delay durations for presence triggers.</li>
        <li>Optionally, specify a volume and delay for lowering the volume after a room is vacated.</li>
      </ul>
    </details>
    ---
    <i>Tip: Only Sonos players will show up for selection. You can use any type of binary presence sensor.</i>
  domain: automation
  input:
    sonos_players:
      name: Sonos Media Players
      description: >
        Select all Sonos media players you want to include in the music-follow group.
      selector:
        entity:
          multiple: true
          filter:
            - integration: sonos
              domain: media_player

    presence_sensors:
      name: Presence Sensors
      description: >
        Select presence sensors for each room.<br>
        ‚ö†Ô∏è <b>Important: You MUST match the order of the sensors based on the order of the media players above. Otherwise the mapping will fail. </b>
      selector:
        entity:
          multiple: true
          domain: binary_sensor

    master_player_helper:
      name: Master Player Helper
      description: >
        Select an <code>input_text</code> helper to store the current master player.
      selector:
        entity:
          domain: input_text

    use_toggle_helper:
      name: Enable Toggle Helper? (Optional)
      description: >
        Would you like to use an <code>input_boolean</code> to enable/disable the automation?
      default: false
      selector:
        boolean:

    toggle_helper:
      name: Toggle Helper (Optional)
      description: >
        Select your <code>input_boolean</code> toggle helper. Only needed if enabled above.
      default: ""
      selector:
        entity:
          domain: input_boolean
          multiple: false

    presence_off_delay:
      name: Presence OFF Delay
      description: >
        How long should a room be empty before unjoining the corresponding player? (default: 60 seconds)
      default: 60
      selector:
        number:
          min: 0
          max: 600
          step: 1
          unit_of_measurement: seconds
          mode: slider

    lower_volume_enabled:
      name: Reset Volume When Room Empty? (Optional)
      description: >
        Enable to automatically set the volume of a player after a room has been empty for a set time.
      default: false
      selector:
        boolean:

    lower_volume_level:
      name: Volume Level After Room Empty (Optional)
      description: >
        What volume level (0.0 - 1.0) should the player be set to after the room is empty? (default: 0.2)
      default: 0.2
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
          mode: slider

    lower_volume_delay:
      name: Delay Before Resetting Volume
      description: >
        How long after the room is empty should the volume be set? (default: 300 seconds = 5 minutes)
      default: 300
      selector:
        number:
          min: 10
          max: 3600
          step: 1
          unit_of_measurement: seconds
          mode: slider

mode: queued
max: 10

variables:
  sonos_players: !input sonos_players
  presence_sensors: !input presence_sensors
  master_player_helper: !input master_player_helper
  use_toggle: !input use_toggle_helper
  toggle_entity: !input toggle_helper
  mapping: |
    {% set sensors = presence_sensors %}
    {% set players = sonos_players %}
    {{ dict(zip(sensors, players)) }}
  lower_volume_enabled: !input lower_volume_enabled
  lower_volume_level: !input lower_volume_level

trigger:
  # Trigger when any Sonos player starts playing
  - platform: state
    entity_id: !input sonos_players
    to: 'playing'
    id: media_player_playing

  # Trigger when any presence sensor turns on
  - platform: state
    entity_id: !input presence_sensors
    to: 'on'
    id: sensor_on

  # Trigger when any presence sensor turns off
  - platform: state
    entity_id: !input presence_sensors
    to: 'off'
    id: sensor_off

  # Trigger when any presence sensor turns off (delayed)
  - platform: state
    entity_id: !input presence_sensors
    to: 'off'
    for:
      seconds: !input presence_off_delay
    id: sensor_off_delayed

  # Trigger for lowering volume after room empty
  - platform: state
    entity_id: !input presence_sensors
    to: 'off'
    for:
      seconds: !input lower_volume_delay
    id: lower_volume

condition:
  - condition: template
    value_template: >
      {{ not use_toggle or is_state(toggle_entity, 'on') }}

action:
  - choose:
      # When music starts playing, set master player if only one is playing
      - conditions:
          - condition: trigger
            id: media_player_playing
          - condition: template
            value_template: >
              {{ expand(sonos_players) | selectattr('state', 'eq', 'playing') | list | length == 1 }}
        sequence:
          - service: input_text.set_value
            target:
              entity_id: "{{ master_player_helper }}"
            data:
              value: "{{ trigger.entity_id }}"

      # When presence of a room switches to off, check if only one room is occupied and update master player accordingly
      - conditions:
          - condition: trigger
            id: sensor_off
          - condition: template
            value_template: >
              {% set mapping_dict = mapping %}
              {% set current_master = states(master_player_helper) %}
              {% set occupied = presence_sensors | select('is_state', 'on') | list %}
              {{ occupied | length == 1 and mapping_dict[occupied[0]] != current_master }}
        sequence:
          - service: input_text.set_value
            target:
              entity_id: "{{ master_player_helper }}"
            data:
              value: >
                {% set mapping_dict = mapping %}
                {% set occupied = presence_sensors | select('is_state', 'on') | list %}
                {{ mapping_dict[occupied[0]] }}

      # When a presence sensor turns ON:
      - conditions:
          # Only run if the trigger was a presence sensor turning on
          - condition: trigger
            id: sensor_on

          # Only continue if the current master player is playing or paused
          - condition: template
            value_template: >
              {{ states(states(master_player_helper)) in ['playing', 'paused'] }}

        sequence:
          - variables:
              # Build useful variables for this step
              mapping_dict: "{{ mapping }}"  # Mapping of presence sensors to Sonos players
              master: "{{ states(master_player_helper) }}"  # Current master player
              new_player: "{{ mapping[trigger.entity_id] }}"  # Player for the room just entered
              current_group: "{{ state_attr(master, 'group_members') or [master] }}"  # Current speaker group
              all_occupied: "{{ presence_sensors | select('is_state', 'on') | list }}"  # List of currently occupied rooms
              master_sensor: >
                # Find which presence sensor maps to the current master player
                {{ mapping_dict | dictsort(false)
                                | selectattr('1', 'equalto', master)
                                | map(attribute='0')
                                | list | first }}

          # Extra check: skip if the new player is currently playing TV audio (don‚Äôt join TV inputs)
          - if:
              - condition: template
                value_template: >
                  {{ state_attr(new_player, 'media_content_type') != 'tv' }}
            then:
              # If you moved into a new room AND that room is now the only occupied room:
              # ‚Üí Make that room's player the new master.
              - if:
                  - condition: template
                    value_template: >
                      {{ trigger.entity_id != master_sensor and
                         all_occupied | length == 1 }}
                then:
                  # Wait briefly to avoid flickering presence states during quick transitions
                  - delay:
                      seconds: 2

                  # Update the master player helper to the newly occupied player
                  - service: input_text.set_value
                    target:
                      entity_id: "{{ master_player_helper }}"
                    data:
                      value: "{{ new_player }}"

              # If the new room‚Äôs player is not already part of the master group:
              # ‚Üí Join it to the group to continue playback in that room.
              - if:
                  - condition: template
                    value_template: >
                      {{ new_player not in current_group }}
                then:
                  # Join new player to master group
                  - service: media_player.join
                    data:
                      entity_id: "{{ master }}"
                      group_members: "{{ [new_player] }}"

                  # Wait up to 10 seconds for the player to appear in the master‚Äôs group_members
                  - wait_template: "{{ new_player in state_attr(master, 'group_members') }}"
                    timeout: 10
                    continue_on_timeout: true

                  # Notify if join failed (player didn‚Äôt show up in group_members)
                  - if:
                      - condition: template
                        value_template: >
                          {{ new_player not in state_attr(master, 'group_members') }}
                    then:
                      - service: persistent_notification.create
                        data:
                          title: "Music Follow - Sonos Join-Timeout"
                          message: >
                            {{ new_player }} couldn't join the speaker group of {{ master }}.

                  # If the master is playing but the newly joined player is not,
                  # force the new player to start playback so it doesn‚Äôt stay silent.
                  - if:
                      - condition: template
                        value_template: >
                          {{ states(master) == 'playing' and states(new_player) != 'playing' }}
                    then:
                      - service: media_player.media_play
                        target:
                          entity_id: "{{ new_player }}"

      - conditions:
          - condition: trigger
            id: sensor_off_delayed
          - condition: template
            value_template: >
              {% set mapping_dict = mapping %}
              {% set player = mapping_dict[trigger.entity_id] %}
              {% set master = states(master_player_helper) %}
              {{ player != master and player in (state_attr(master, 'group_members') or []) }}
        sequence:
          - variables:
              player: "{{ mapping[trigger.entity_id] }}"
          - service: media_player.unjoin
            target:
              entity_id: "{{ player }}"
          - delay: 2
          - if:
              - condition: template
                value_template: "{{ player in state_attr(states(master_player_helper), 'group_members') }}"
            then:
              - service: persistent_notification.create
                data:
                  title: "Music Follow - Sonos Unjoin-Error"
                  message: >
                    {{ player }} couldn't be unjoined from current speaker group.

      # Lower volume after room empty for specified time
      - conditions:
          - condition: trigger
            id: lower_volume
          - condition: template
            value_template: "{{ lower_volume_enabled }}"
        sequence:
          - service: media_player.volume_set
            target:
              entity_id: >
                {% set mapping_dict = mapping %}
                {{ mapping_dict[trigger.entity_id] }}
            data:
              volume_level: "{{ lower_volume_level }}"
    default: []
