blueprint:
  name: üéµ Music Follow (Sonos) ‚Äì Presence-Based Grouping Of Speakers
  description: |
    <details>
      <summary><b>What does this blueprint do?</b></summary>
      <p>
        <strong>Music Follow</strong> automatically groups and ungroups Sonos speakers based on your room presence.
        <br><br>
        When you enter a room, the corresponding speaker joins the active playback. When you leave, it unjoins after a configurable delay.
        <br>
        Optionally, you can set the volume of a speaker to a fixed value after its room has been empty for a certain period. This helps prevent blasting music at full volume when you enter a room in which you might have had a party earlier.
      </p>
    </details>

    <details>
      <summary><b>How to use</b></summary>
      <ul>
        <li>Select your Sonos speakers and the corresponding room presence sensors.</li>
        <li>‚ö†Ô∏è Ensure the order of the sensors matches the order of the speakers.</li>
        <li>Optionally, specify a volume level and delay for setting the volume after a room is vacated.</li>
      </ul>
    </details>

    ---
    <i>Tip: Only Sonos players will show up for selection. You can use any type of binary sensor (helpers included) for presence detection.<br>
    Just make sure, that you have selected only one presence sensor per room.</i>

  domain: automation
  input:
    sonos_players:
      name: Sonos Media Players
      description: >
        Select all Sonos media players you want this automation to control.<br>
        Match the order with the presence sensors below.
      selector:
        entity:
          multiple: true
          filter:
            - integration: sonos
              domain: media_player

    presence_sensors:
      name: Presence Sensors
      description: >
        Select binary presence sensors for each room.<br>
        ‚ö†Ô∏è The order must correspond to the Sonos players above.
      selector:
        entity:
          multiple: true
          domain: binary_sensor

    presence_off_delay:
      name: Presence OFF Delay (seconds)
      description: >
        Delay before a speaker unjoins after its room becomes empty.
      default: 60
      selector:
        number:
          min: 0
          max: 600
          step: 1
          unit_of_measurement: seconds
          mode: slider

    set_volume_enabled:
      name: Set Volume When Room Empty?
      description: >
        If enabled, the volume of the speaker in the empty room will be set to a defined level after a delay.
      default: false
      selector:
        boolean:

    set_volume_level:
      name: Volume Level to Set
      description: >
        Target volume level (0.0 - 1.0) to set for speakers in vacated rooms.
        Only used if the volume-setting option is enabled.
      default: 0.2
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
          mode: slider

    set_volume_delay:
      name: Delay Before Setting Volume (seconds)
      description: >
        How long after the room is empty should the volume be set?
        Applies only if volume setting is enabled.
      default: 300
      selector:
        number:
          min: 10
          max: 3600
          step: 1
          unit_of_measurement: seconds
          mode: slider

mode: queued
max: 10

variables:
  sonos_players: !input sonos_players
  presence_sensors: !input presence_sensors

  # Map each presence sensor to its corresponding speaker
  mapping: >
    {% set sensors = presence_sensors %}
    {% set players = sonos_players %}
    {{ dict(zip(sensors, players)) }}

  set_volume_enabled: !input set_volume_enabled
  set_volume_level: !input set_volume_level

  # Dynamically determine the current master player (first one playing)
  master_player: >
    {% set playing = expand(sonos_players) | selectattr('state', 'eq', 'playing') | list %}
    {{ playing[0].entity_id if playing | length > 0 else None }}

trigger:
  # Trigger when any Sonos starts playing
  - platform: state
    entity_id: !input sonos_players
    to: 'playing'
    id: media_player_playing

  # Trigger when someone enters a room
  - platform: state
    entity_id: !input presence_sensors
    to: 'on'
    id: sensor_on

  # Trigger when someone leaves a room
  - platform: state
    entity_id: !input presence_sensors
    to: 'off'
    id: sensor_off

  # Trigger when room has been empty for a delay (for unjoining)
  - platform: state
    entity_id: !input presence_sensors
    to: 'off'
    for:
      seconds: !input presence_off_delay
    id: sensor_off_delayed

  # Trigger when room has been empty for a delay (for setting volume)
  - platform: state
    entity_id: !input presence_sensors
    to: 'off'
    for:
      seconds: !input set_volume_delay
    id: set_volume

action:
  - choose:
      # ‚ûï JOIN speaker to master when presence is detected
      - conditions:
          - condition: trigger
            id: sensor_on
          - condition: template
            value_template: "{{ states(master_player) == 'playing' }}"
          - condition: template
            value_template: >
              {% set mapping_dict = mapping %}
              {% set new_player = mapping_dict[trigger.entity_id] %}
              {% set group = state_attr(master_player, 'group_members') | default([]) %}
              {{ new_player != master_player and new_player not in group }}
        sequence:
          - service: media_player.join
            data:
              entity_id: "{{ master_player }}"
              group_members: >
                {% set mapping_dict = mapping %}
                {{ mapping_dict[trigger.entity_id] }}

      # ‚ûñ UNJOIN speaker when room is empty for a while
      - conditions:
          - condition: trigger
            id: sensor_off_delayed
        sequence:
          - service: media_player.unjoin
            target:
              entity_id: >
                {% set mapping_dict = mapping %}
                {{ mapping_dict[trigger.entity_id] }}

      # üîâ SET VOLUME when room is empty after delay
      - conditions:
          - condition: trigger
            id: set_volume
          - condition: template
            value_template: "{{ set_volume_enabled }}"
        sequence:
          - service: media_player.volume_set
            target:
              entity_id: >
                {% set mapping_dict = mapping %}
                {{ mapping_dict[trigger.entity_id] }}
            data:
              volume_level: "{{ set_volume_level }}"
    default: []
