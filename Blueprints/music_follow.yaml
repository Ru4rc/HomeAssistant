blueprint:
  name: Sonos Music Follow – Dynamic Speaker Grouping based on Room Presence
  description: |
    🔊 **Automatically have your Sonos speakers follow you from room to room!**

    This blueprint intelligently groups and ungroups your selected Sonos speakers based on where you are in your home.

    - 🏠 When you enter a room, that room’s speaker joins the active music group.
    - 🚪 When you leave a room, its speaker unjoins after a delay.
    - 🔇 If you leave the room of your **master speaker**, it will mute itself instead of unjoining — keeping your queue alive!
    - 📺 Players currently playing TV audio will never be grouped, so you won’t accidentally merge your TV and music.
    - 💤 When all presence sensors show nobody home for a while, playback stops and the group resets.
    - 🔁 If all players have stopped playing for a while, the group resets automatically and the master unmutes.

    ---
    <details>
    <summary><b>🛠 How it works</b></summary>

    - Select your Sonos speakers and match them with one presence sensor each.
    - Use an `input_text` helper to store the master player.
    - Optionally set delays for unjoining, volume lowering, and group reset.
    </details>

  domain: automation

  input:
    sonos_players:
      name: 🎶 Sonos Speakers
      description: >
        Select **all Sonos speakers** you want to include.
        Each speaker must have a matching presence sensor below.
      selector:
        entity:
          multiple: true
          filter:
            - integration: sonos
              domain: media_player

    presence_sensors:
      name: 🚪 Room Presence Sensors
      description: >
        Select one presence sensor per room, matching the order of your speakers above.
      selector:
        entity:
          multiple: true
          domain: binary_sensor

    master_player_helper:
      name: 🗂️ Master Player Helper (`input_text`)
      description: >
        Select an `input_text` helper to store the current master speaker.
      selector:
        entity:
          domain: input_text

    use_toggle_helper:
      name: ✅ Enable Toggle Helper?
      description: >
        Use this if you want an `input_boolean` to enable/disable the automation.
      default: false
      selector:
        boolean:

    toggle_helper:
      name: 🕹️ Toggle Helper (`input_boolean`)
      description: >
        Select the toggle helper here if enabled above.
      default: ""
      selector:
        entity:
          domain: input_boolean

    presence_off_delay:
      name: ⏲️ Room Vacant Delay (seconds)
      description: >
        How long a room should stay empty before unjoining its speaker.
      default: 30
      selector:
        number:
          min: 0
          max: 600
          unit_of_measurement: seconds

    all_rooms_off_delay:
      name: 💤 Whole House Vacant Delay (seconds)
      description: >
        How long all sensors must be off before stopping playback.
      default: 60
      selector:
        number:
          min: 0
          max: 1800
          unit_of_measurement: seconds

    set_volume_enabled:
      name: 🔉 Set Volume for empty rooms?
      description: >
        If enabled, the speakers will be set to a given volume level after a room has been empty for a set amount of time.
      default: false
      selector:
        boolean:

    set_volume_level:
      name: 🎚️ Volume Level After Room Empty
      description: >
        What volume (0.0–1.0) to set for speakers after room is empty.
      default: 0.2
      selector:
        number:
          min: 0
          max: 1
          step: 0.01

    set_volume_delay:
      name: ⏳ Delay Before Setting Volume (seconds)
      description: >
        How long to wait before setting the volume for a vacated room.
      default: 300
      selector:
        number:
          min: 10
          max: 3600
          unit_of_measurement: seconds

    pause_reset_delay:
      name: ⏹️ Pause Reset Delay (seconds)
      description: >
        How long the master speaker must remain paused before resetting the group and clearing the master.
      default: 30
      selector:
        number:
          min: 5
          max: 600
          unit_of_measurement: seconds

    group_reset_delay:
      name: ⏲️ Group Reset Delay (seconds)
      description: >
        How long after all players stop should the group reset and master unmute.
      default: 120
      selector:
        number:
          min: 10
          max: 1800
          unit_of_measurement: seconds

mode: queued
max: 10

variables:
  sonos_players: !input sonos_players
  presence_sensors: !input presence_sensors
  master_player_helper: !input master_player_helper
  use_toggle: !input use_toggle_helper
  toggle_entity: !input toggle_helper
  mapping: |
    {% set sensors = presence_sensors %}
    {% set players = sonos_players %}
    {{ dict(zip(sensors, players)) }}
  set_volume_enabled: !input set_volume_enabled
  set_volume_level: !input set_volume_level

trigger:
  # Trigger when any Sonos player starts playing
  - platform: state
    entity_id: !input sonos_players
    to: 'playing'
    id: media_player_playing

  # When any presence sensor turns ON
  - platform: state
    entity_id: !input presence_sensors
    to: 'on'
    id: sensor_on

  # When any presence sensor turns OFF
  - platform: state
    entity_id: !input presence_sensors
    to: 'off'
    id: sensor_off

  # When any sensor stays OFF for presence_off_delay
  - platform: state
    entity_id: !input presence_sensors
    to: 'off'
    for:
      seconds: !input presence_off_delay
    id: sensor_off_delayed

  # When all sensors OFF for whole house vacant delay
  - platform: state
    entity_id: !input presence_sensors
    to: 'off'
    for:
      seconds: !input all_rooms_off_delay
    id: all_rooms_off_delayed

  # Optional: set volume after room empty for set_volume_delay
  - platform: state
    entity_id: !input presence_sensors
    to: 'off'
    for:
      seconds: !input set_volume_delay
    id: set_volume
    
  # When master has been paused for x seconds → reset group
  - platform: state
    entity_id: !input sonos_players
    to: 'paused'
    for:
      seconds: !input pause_reset_delay
    id: paused_delayed

  # When all players are not playing anymore, reset group after given delay
  - platform: template
    value_template: >
      {% set inactive_states = ['idle', 'off', 'paused'] %}
      {% set inactive_players = expand(sonos_players) | selectattr('state', 'in', inactive_states) | list %}
      {{ inactive_players | length == sonos_players | length }}
    for:
      seconds: !input group_reset_delay
    id: group_reset

condition:
  - condition: template
    value_template: "{{ not use_toggle or is_state(toggle_entity, 'on') }}"

action:
  - choose:
      # When only one player starts playing → set master
      - conditions:
          - condition: trigger
            id: media_player_playing
          - condition: template
            value_template: "{{ expand(sonos_players) | selectattr('state', 'eq', 'playing') | list | length == 1 }}"
        sequence:
          - service: input_text.set_value
            target:
              entity_id: "{{ master_player_helper }}"
            data:
              value: "{{ trigger.entity_id }}"

      # When all rooms empty → stop master
      - conditions:
          - condition: trigger
            id: all_rooms_off_delayed
          - condition: template
            value_template: "{{ presence_sensors | select('is_state', 'on') | list | length == 0 }}"
        sequence:
          - service: media_player.media_stop
            target:
              entity_id: "{{ states(master_player_helper) }}"
          - service: input_text.set_value
            target:
              entity_id: "{{ master_player_helper }}"
            data:
              value: ""

      # Master room empty → mute master
      - conditions:
          - condition: trigger
            id: sensor_off_delayed
          - condition: template
            value_template: >
              {% set mapping_dict = mapping %}
              {% set player = mapping_dict[trigger.entity_id] %}
              {% set master = states(master_player_helper) %}
              {{ player == master }}
        sequence:
          - service: media_player.volume_mute
            target:
              entity_id: "{{ states(master_player_helper) }}"
            data:
              is_volume_muted: true

      # Master room occupied → unmute master
      - conditions:
          - condition: trigger
            id: sensor_on
          - condition: template
            value_template: >
              {% set mapping_dict = mapping %}
              {% set player = mapping_dict[trigger.entity_id] %}
              {% set master = states(master_player_helper) %}
              {{ player == master }}
        sequence:
          - service: media_player.volume_mute
            target:
              entity_id: "{{ states(master_player_helper) }}"
            data:
              is_volume_muted: false

      # Non-master room occupied → join to master if needed
      - conditions:
          - condition: trigger
            id: sensor_on
          - condition: template
            value_template: >
              {% set mapping_dict = mapping %}
              {% set player = mapping_dict[trigger.entity_id] %}
              {% set master = states(master_player_helper) %}
              {{ player != master and states(master) in ['playing', 'paused'] }}
        sequence:
          - variables:
              mapping_dict: "{{ mapping }}"
              master: "{{ states(master_player_helper) }}"
              new_player: "{{ mapping[trigger.entity_id] }}"
              current_group: "{{ state_attr(master, 'group_members') or [master] }}"
          - if:
              - condition: template
                value_template: "{{ new_player not in current_group }}"
            then:
              - if:
                  - condition: template
                    value_template: "{{ state_attr(new_player, 'media_content_type') != 'tv' }}"
                then:
                  - service: media_player.join
                    data:
                      entity_id: "{{ master }}"
                      group_members: "{{ [new_player] }}"
                  - wait_template: "{{ new_player in state_attr(master, 'group_members') }}"
                    timeout: 10
                    continue_on_timeout: true

      # Non-master room empty → unjoin that player
      - conditions:
          - condition: trigger
            id: sensor_off_delayed
          - condition: template
            value_template: >
              {% set mapping_dict = mapping %}
              {% set player = mapping_dict[trigger.entity_id] %}
              {% set master = states(master_player_helper) %}
              {{ player != master and player in (state_attr(master, 'group_members') or []) }}
        sequence:
          - service: media_player.unjoin
            target:
              entity_id: "{{ mapping[trigger.entity_id] }}"

      # Optional: set volume after set_volume_level
      - conditions:
          - condition: trigger
            id: set_volume
          - condition: template
            value_template: "{{ set_volume_enabled }}"
        sequence:
          - service: media_player.volume_set
            target:
              entity_id: >
                {% set mapping_dict = mapping %}
                {{ mapping_dict[trigger.entity_id] }}
            data:
              volume_level: "{{ set_volume_level }}"

      # Master paused for too long → reset group
      - conditions:
          - condition: trigger
            id: paused_delayed
          - condition: template
            value_template: >
              {% set master = states(master_player_helper) %}
              {{ trigger.entity_id == master }}
        sequence:
          - service: media_player.unjoin
            target:
              entity_id: >
                {% set members = state_attr(trigger.entity_id, 'group_members') | default([]) %}
                {{ members | reject('equalto', trigger.entity_id) | list }}
          - service: media_player.volume_mute
            target:
              entity_id: !input sonos_players
            data:
              is_volume_muted: false
          - service: input_text.set_value
            target:
              entity_id: "{{ master_player_helper }}"
            data:
              value: ""

      # All players idle/off for group_reset_delay → reset group
      - conditions:
          - condition: trigger
            id: group_reset
        sequence:
          - service: media_player.unjoin
            target:
              entity_id: >
                {% set master = states(master_player_helper) %}
                {% set members = state_attr(master, 'group_members') | default([]) %}
                {{ members | reject('equalto', master) | list }}
          - service: media_player.volume_mute
            target:
              entity_id: !input sonos_players
            data:
              is_volume_muted: false
          - service: input_text.set_value
            target:
              entity_id: "{{ master_player_helper }}"
            data:
              value: ""
    default: []
